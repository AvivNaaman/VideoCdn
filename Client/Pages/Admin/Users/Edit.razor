@page "/admin/users/{id:int}"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient http
@inject NavigationManager navigation

<h1>Edit User</h1>
@if (model is null)
{
    <h6>Loading...</h6>
}
else
{
    <EditForm Model="model" OnValidSubmit="ValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>User Name</label>
            <InputText class="form-control" @bind-Value="model.UserName" />
            <ValidationMessage For="() => model.UserName" />
        </div>

        <div class="form-group">
            <label>Email Address</label>
            <InputText class="form-control" @bind-Value="model.Email" />
            <ValidationMessage For="() => model.Email" />
        </div>

        @if (roles is not null)
        {
            <div class="form-group">
                <label>Roles</label>
                <ul class="list-group">
                    @foreach (var role in roles)
                    {
                        <li class="list-group-item">
                            <div class="custom-control custom-checkbox">
                                <InputCheckbox @bind-Value="role.IsInRole" DisplayName="" class="custom-control-input" id="@("roleCheck_"+role.Role)" />
                                <label for="@("roleCheck_"+role.Role)" class="custom-control-label">
                                    @role.Role
                                </label>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        }
        else
        {
            <h6>Fetching roles..</h6>
        }

        <button class="btn btn-success" type="submit">Save &amp; Close</button>
    </EditForm>
}
@code {

    [Parameter]
    public int Id { get; set; }

    private UserModel model;

    private List<NotReadOnlyKvp> roles;

    protected async override Task OnInitializedAsync()
    {
        model = await http.GetFromJsonAsync<UserModel>($"/api/v1/Admin/GetUserById?id={Id}");

        roles = (await http.GetFromJsonAsync<List<string>>("/api/v1/Admin/Roles"))
            .Select(r => new NotReadOnlyKvp { Role = r, IsInRole = model.Roles.Contains(r) }).ToList();
    }

    private async Task ValidSubmit()
    {
        model.Roles = roles.Where(r => r.IsInRole == true).Select(r => r.Role);
        await http.PostAsJsonAsync<UserModel>($"/api/v1/Admin/Users/Update", model);
        navigation.NavigateTo("/admin/users");
    }

    private class NotReadOnlyKvp
    {
        public string Role { get; set; }
        public bool IsInRole { get; set; }
    }
}
