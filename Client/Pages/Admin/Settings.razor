@page "/admin/settings"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient http
@using VideoCdn.Web.Client.Shared

<h1>Admin/Settings</h1>

@if (model is null)
{
    <h2>Loading...</h2>
}
else
{
    <EditForm EditContext="@EditContext">
        <DataAnnotationsValidator />
        <div class="form-group">
            <h4>Enabled encoding resolution </h4>
            <span>(will only applied on unstarted encodings!)</span>
            <div class="custom-control custom-checkbox">
                <InputCheckbox class="custom-control-input" @bind-Value="model.Encode360p" DisplayName="" id="check360p" />
                <label class="custom-control-label" for="check360p">360p</label>
            </div>
            <div class="custom-control custom-checkbox">
                <InputCheckbox class="custom-control-input" @bind-Value="model.Encode480p" DisplayName="" id="check480p" />
                <label class="custom-control-label" for="check480p">SD (480p)</label>
            </div>

            <div class="custom-control custom-checkbox">
                <InputCheckbox class="custom-control-input" @bind-Value="model.Encode720p" DisplayName="" id="check720p" />
                <label class="custom-control-label" for="check720p">HD (720p)</label>
            </div>

            <div class="custom-control custom-checkbox">
                <InputCheckbox class="custom-control-input" @bind-Value="model.Encode1080p" DisplayName="" id="check1080p" />
                <label class="custom-control-label" for="check1080p">FHD (1080p)</label>
            </div>

            <div class="custom-control custom-checkbox">
                <InputCheckbox class="custom-control-input" @bind-Value="model.Encode2160p" DisplayName="" id="check2160p" />
                <label class="custom-control-label" for="check2160p">4K (2160p)</label>
            </div>

            <div class="custom-control custom-checkbox">
                <InputCheckbox class="custom-control-input" @bind-Value="model.Encode4320p" DisplayName="" id="check4320p" />
                <label class="custom-control-label" for="check4320p">8K (4320p)</label>
            </div>

            <div class="custom-control custom-checkbox">
                <InputCheckbox class="custom-control-input" @bind-Value="model.KeepCache" DisplayName="" id="checkKeepCache" />
                <label class="custom-control-label" for="checkKeepCache">Keep Cache upload cache even afetr encoded</label>
            </div>
        </div>
        <div class="form-group">
            <h4>Tokens for Videos</h4>
            <div class="custom-control custom-checkbox">
                <InputCheckbox class="custom-control-input" @bind-Value="model.UseTokens" DisplayName="" id="checkUseTokens" />
                <label class="custom-control-label" for="checkUseTokens">Use tokens for videos</label>
            </div>
            <div class="form-group">
                <label>Token expiry (in minutes)</label>
                <InputNumber class="form-control" @bind-Value="model.TokenExpiry" />
            </div>
            <div class="form-group">
                <h5>Allowed keys (for token validation)</h5>
                <h6>New key</h6>
                <InputText @bind-Value="newKeyName" class="form-control" placeholder="Key name"/>
                <button class="btn btn-primary my-2" type="button" @onclick="GenerateNewTokenClicked" disabled="@isGeneratingToken">Generate</button>
                <h6>Existing keys</h6>
                <ul class="list-group">
                    @foreach (var key in model.TokenKeys)
                    {
                        <li class="list-group-item">
                            @key.Key | <SecretText Text="@key.Value" /> | <button class="btn btn-danger" @onclick="() => RemoveKey(key.Key)" type="button"><span class="oi oi-trash" aria-hidden="true"></span></button>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </EditForm>
}

@code {
    VideoCdnSettings model;

    string newKeyName;

    private EditContext EditContext;


    protected async override Task OnInitializedAsync()
    {
        model = await http.GetFromJsonAsync<VideoCdnSettings>("/api/v1/Admin/Settings");
        EditContext = new(this.model);
        EditContext.OnFieldChanged += FormFieldChanged;
    }

    private bool isGeneratingToken = false;
    private async Task GenerateNewTokenClicked()
    {
        isGeneratingToken = true;
        string generatedKey = await http.GetStringAsync($"/api/v1/Admin/Settings/GenerateKey?name={newKeyName}");
        model.TokenKeys.Add(newKeyName, generatedKey);
        newKeyName = string.Empty;
        StateHasChanged();
        isGeneratingToken = false;
    }

    private async void FormFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (EditContext.Validate())
        {
            await http.PostAsJsonAsync("/api/v1/Admin/Settings", model);
        }
    }

    private async Task RemoveKey(string keyName)
    {
        isGeneratingToken = true;
         await http.PostAsync($"/api/v1/Admin/Settings/RemoveKey?name={keyName}", null);
        model.TokenKeys.Remove(keyName);
        StateHasChanged();
        isGeneratingToken = false;
    }
}
